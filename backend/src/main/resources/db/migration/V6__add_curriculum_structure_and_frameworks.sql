-- Add prerequisite course support to curriculum_items
ALTER TABLE curriculum_items 
ADD COLUMN prerequisite_course_id BIGINT,
ADD CONSTRAINT fk_ci_prerequisite FOREIGN KEY (prerequisite_course_id) REFERENCES courses(id) ON DELETE SET NULL;

-- Create course_relationships table for course dependencies within curricula
CREATE TABLE IF NOT EXISTS course_relationships (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    curriculum_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    related_course_id BIGINT NOT NULL,
    relationship_type VARCHAR(50) NOT NULL CHECK (relationship_type IN ('prerequisite', 'corequisite')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_cr_curriculum FOREIGN KEY (curriculum_id) REFERENCES curricula(id) ON DELETE CASCADE,
    CONSTRAINT fk_cr_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE,
    CONSTRAINT fk_cr_related_course FOREIGN KEY (related_course_id) REFERENCES courses(id) ON DELETE CASCADE,
    CONSTRAINT uq_course_relationship UNIQUE (curriculum_id, course_id, related_course_id, relationship_type)
);

-- Create curriculum_frameworks table
CREATE TABLE IF NOT EXISTS curriculum_frameworks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    major_id BIGINT NOT NULL,
    total_credits NUMERIC(6,2) DEFAULT 0,
    description TEXT,
    status VARCHAR(50) DEFAULT 'DRAFT',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_cf_major FOREIGN KEY (major_id) REFERENCES majors(id) ON DELETE CASCADE
);

-- Create framework_blocks table to link frameworks with knowledge blocks
CREATE TABLE IF NOT EXISTS framework_blocks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    framework_id BIGINT NOT NULL,
    knowledge_block_id BIGINT NOT NULL,
    sequence_order INTEGER NOT NULL DEFAULT 0,
    is_required BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_fb_framework FOREIGN KEY (framework_id) REFERENCES curriculum_frameworks(id) ON DELETE CASCADE,
    CONSTRAINT fk_fb_knowledge_block FOREIGN KEY (knowledge_block_id) REFERENCES knowledge_blocks(id) ON DELETE CASCADE,
    CONSTRAINT uq_framework_block UNIQUE (framework_id, knowledge_block_id)
);

-- Create curriculum_clones table for tracking duplication history
CREATE TABLE IF NOT EXISTS curriculum_clones (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    source_curriculum_id BIGINT NOT NULL,
    new_curriculum_id BIGINT NOT NULL,
    cloned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    cloned_by BIGINT,
    CONSTRAINT fk_cc_source FOREIGN KEY (source_curriculum_id) REFERENCES curricula(id) ON DELETE CASCADE,
    CONSTRAINT fk_cc_new FOREIGN KEY (new_curriculum_id) REFERENCES curricula(id) ON DELETE CASCADE,
    CONSTRAINT fk_cc_user FOREIGN KEY (cloned_by) REFERENCES users(id) ON DELETE SET NULL
);

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_curriculum_items_prerequisite ON curriculum_items(prerequisite_course_id);
CREATE INDEX IF NOT EXISTS idx_course_relationships_curriculum ON course_relationships(curriculum_id);
CREATE INDEX IF NOT EXISTS idx_course_relationships_course ON course_relationships(course_id);
CREATE INDEX IF NOT EXISTS idx_curriculum_frameworks_major ON curriculum_frameworks(major_id);
CREATE INDEX IF NOT EXISTS idx_framework_blocks_framework ON framework_blocks(framework_id);
CREATE INDEX IF NOT EXISTS idx_curriculum_clones_source ON curriculum_clones(source_curriculum_id);

