rules:
  - "Use Next.js App Router with TypeScript in `frontend/`."
  - "Place new pages under `frontend/src/app/` using nested route folders."
  - "Use `page.tsx` for route entries and colocate components in the route folder."
  - "Store shared UI in `frontend/src/components/` using PascalCase file names."
  - "Use TypeScript everywhere on the frontend; avoid `.js` files."
  - "Use Tailwind CSS v4 with `@tailwindcss/postcss`; style via utility classes."
  - "Define global styles only in `frontend/src/app/globals.css`."
  - "Prefer functional React components with named exports."
  - "Use camelCase for variables/functions, PascalCase for components/types, kebab-case for routes."
  - "Use absolute imports with `@/*` alias for `frontend/src/*`."
  - "Use Axios for HTTP via the shared instance in `frontend/src/lib/api.ts`."
  - "Create new API wrappers in `frontend/src/lib/api.ts` or colocated `api.ts` per domain."
  - "Always use async/await for API calls and return typed responses."
  - "Handle pagination with the `PageResponse<T>` shape from `frontend/src/lib/api.ts`."
  - "Do not embed backend URLs inline; import the shared Axios instance."
  - "Keep environment-specific config in Next config or env vars, not hardcoded."
  - "Use ESLint (Next.js + TypeScript) config in `frontend/eslint.config.mjs`."
  - "Avoid client-side data mutations without optimistic UI or revalidation plan."
  - "Place static assets in `frontend/public/` and reference with `/path`."
  - "Backend uses Spring Boot 3 (Java 17) in `backend/`."
  - "Follow layered architecture: controller -> service -> repository -> entity."
  - "Expose REST APIs under `/api/**` using `@RestController`."
  - "Validate inputs with Jakarta Validation (`@Valid`, constraints annotations)."
  - "Use Spring Security + JWT for auth; read token from `Authorization` header."
  - "Use JPA/Hibernate with PostgreSQL; map entities with JPA annotations."
  - "Manage schema changes with Flyway in `backend/src/main/resources/db/migration`."
  - "Do not use `ddl-auto=update` for production; rely on Flyway migrations."
  - "Name database tables in snake_case and entities in PascalCase."
  - "DTOs end with `Request`/`Response` and live beside their controller/service packages."
  - "Place new controllers under `backend/src/main/java/.../controller`."
  - "Place new services under `.../service` and annotate with `@Service`."
  - "Place repositories under `.../repository` extending `JpaRepository`."
  - "Place entities under domain packages (e.g., `.../courses`, `.../knowledgeblocks`)."
  - "Keep transaction boundaries in services; avoid repository calls from controllers."
  - "Return paginated results using Spring `Page` or explicit `PageResponse`."
  - "Document endpoints using springdoc-openapi; group by domain."
  - "Frontend calls backend REST endpoints rooted at `/api`."
  - "Keep code style strict: no implicit any, `strict` TS mode on."
  - "Do use: typed props, early returns, small pure components."
  - "Don't use: any, unnamed default exports, untyped API responses."
  - "Do use: PascalCase React components and filenames like `MyComponent.tsx`."
  - "Don't: put feature code in `pages/` or outside `src/`."
  - "Do colocate minor route-specific components with the route; share larger ones in `src/components`."
  - "Don't commit secrets; use env vars and `application.properties` only for local dev."
  - "Keep testable logic out of components; extract to helpers when complex."
